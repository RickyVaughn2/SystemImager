#
#	"SystemImager"
#
#    vi: set filetype=make:
#
#	Copyright (C) 1999-2015 Brian Elliott Finley
#	Copyright (C) 2002-2004 dann frazier <dannf@hp.com>
#
#	Others who have contributed to this code:
#		Sean Dague <sean@dague.net>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

INITRD_PATCH_DIR = $(INITRD_DIR)/patches
INITRD_SRC_DIR = $(INITRD_DIR)/src
INITRD_BINARIES = $(shell file \
							initrd_source/build_dir/bin/* \
							initrd_source/build_dir/usr/bin/* \
							initrd_source/build_dir/sbin/* \
							initrd_source/build_dir/usr/sbin/* \
							initrd_source/build_dir/lib/udev/* \
							| egrep ':.*ELF ' \
							| perl -pi -e 's/:.*//')

STAMP_DIR = $(INITRD_SRC_DIR)

INITRD_BUILD_DIR = $(INITRD_DIR)/build_dir

SKEL_FILES = $(shell find $(INITRD_DIR)/skel \
						-not -regex '.*/.svn.*' -and \
						-not -regex '.*/.svn')

#
# Order is relevant for certain components, so re-order as is appropriate. -BEF-
#
include $(INITRD_DIR)/make.d/cx_freeze.rul
include $(INITRD_DIR)/make.d/bittorrent.rul
include $(INITRD_DIR)/make.d/udpcast.rul
include $(INITRD_DIR)/make.d/busybox.rul
include $(INITRD_DIR)/make.d/hfsutils.rul


$(INITRD_BUILD_DIR).skel:	$(INITRD_DIR)/initrd.rul
	rm -fr $(INITRD_BUILD_DIR)
	mkdir -p $(INITRD_BUILD_DIR)
	mkdir -p -m 0755 $(INITRD_BUILD_DIR)/bin
	touch $@

$(INITRD_BUILD_DIR).prep: $(INITRD_BUILD_DIR).skel $(SKEL_FILES)
	touch $@

PHONY += build_dir 
build_dir:	$(INITRD_BUILD_DIR).build
$(INITRD_BUILD_DIR).build:  \
			$(INITRD_BUILD_DIR).prep \
			$(CX_FREEZE_DIR).build \
			$(BITTORRENT_DIR).install \
			$(UDPCAST_DIR).install \
			$(BUSYBOX_DIR).install \
			$(HFSUTILS_DIR).install
	
	# BitTorrent binaries must not be stripped. -AR-
	test -e $(INITRD_BUILD_DIR)/bin/torrentinfo-console || (cd $(INITRD_BUILD_DIR)/bin && ln -s ../lib/bittorrent/torrentinfo-console)
	test -e $(INITRD_BUILD_DIR)/bin/bittorrent-console  || (cd $(INITRD_BUILD_DIR)/bin && ln -s ../lib/bittorrent/bittorrent-console)
	
	# lsb init functions needed by udev init script
	# Copy over text files from the skel directory.
	cp -a $(INITRD_DIR)/skel/* $(INITRD_BUILD_DIR)
	
	# Set defaut.target for systemd.
	cd $(INITRD_BUILD_DIR)/usr/lib/systemd/system && ln -sf systemimager.target default.target
	
	# Copy over modules required prior to retrieving the autoinstall
	# binaries tarball. -BEF-
	cp -a $(INITRD_DIR)/my_modules $(INITRD_BUILD_DIR)
	
	touch $@

#
# Binaries to be copied in for the auto-install client initrd template from the build-host
#
E2FSPROGS 	= mke2fs mkfs.ext2 mkfs.ext3 mkfs.ext4 mklost+found resize2fs tune2fs e2fsck
XFSPROGS 	= e2fsck mkfs.xfs
JFSPROGS	= jfs_mkfs jfs_tune
DOSFSTOOLS 	= dosfsck dosfslabel fatlabel fsck.fat fsck.msdos fsck.vfat mkdosfs mkfs.fat mkfs.msdos mkfs.vfat
BTRFSUTILS 	= btrfs btrfsck btrfstune fsck.btrfs mkfs.btrfs
COREUTILS 	= cut date echo env sort test false true [ expr head install tail tee tr uniq wc 
OTHERUTILS 	= bc gzip bzip2 rsync parted loadkeys clear reset stty tty kexec ipcalc
SYSTEMDUTILS 	= systemd-cat
OPTUTILS 	= depmod strace

#
# Uncomment these individually if _NOT_ building the tools they
# represent. -BEF-
#
#BUSYBOX = setserial iostat sed rev hostname egrep conspy vi kill dnsdomainname busybox more mpstat ping dmesg fgrep umount base64 ash sh grep ps mount tar init mkswap rmmod syslogd bootchartd blockdev swapon pivot_root makedevs halt lsmod fdisk modinfo ifconfig insmod reboot poweroff modprobe switch_root route klogd swapoff killall nc eject uptime whois pmap fgconsole smemcap xz unxz wget lsof groups xzcat flock sha3sum logger nslookup time awk find less pstree pwdx which ubiattach ubidetach ubimkvol powertop ubiupdatevol nbd-client ubirsvol ubirmvol nanddump nandwrite
#CX_FREEZE
#BITTORRENT
#UDPCAST = udp-receiver
#HFSUTILS = fsck.hfs hattrib hcd hcopy hdel hdir hformat hfs hfsck hls hmkdir hmount hpwd hrename hrmdir humount hvol

PHONY += test_for_initrd_binaries
test_for_initrd_binaries:
	for binary in $(INITRD_BINARIES) ; do \
        which $$binary || (echo ERROR: Please install $$binary! ; exit 1); \
    done

INITRD_BINARIES = \
	$(E2FSPROGS) \
	$(XFSPROGS) \
	$(JFSPROGS) \
	$(DOSFSTOOLS) \
	$(BTRFSUTILS) \
	$(COREUTILS) \
	$(OTHERUTILS) \
	$(SYSTEMDUTILS) \
	$(OPTUTILS) \
	$(HFSUTILS)

# Appropriate for a build in a CentOS based Docker container (or CentOS native). -BEF-
KVER = $(shell rpm -qa --queryformat "%{VERSION}-%{RELEASE}.%{ARCH}\n" kernel)

#
# Consider options for this...  Auto-detect?  Or allow specification on
# command line?  "make BUILD_IN_CONTAINER=no server_all".  Consider
# packaging requirements from Debian and RHEL.
#
# Maybe the best idea is to always use the image server's binaries, but
# to use dracut from a container.
#
# Alternately, don't include any binaries with the initial dracut
# initrd, but rather just treat it as a template.  Then have a script
# that's run from the imageserver to collect all the binaries and
# modules, and put them all together on the imageserver.  This would
# address the Debian concern of shipping a binary in a package that
# wasn't built as part of that package.  XXX -BEF-
#
# Force to use container for now... -BEF-
BUILD_IN_CONTAINER = yes
ifeq ($(BUILD_IN_CONTAINER),yes)
INITRD_DEPS = build_dir build_container
DRACUT_CMD = docker run --rm --interactive --tty -v $(TOPDIR):/usr/src/systemimager \
		-h systemimager-build-container  $(DOCKER_IMAGE_NAME) \
        make -C /usr/src/systemimager dracut_initrd
else
INITRD_DEPS = build_dir
DRACUT_CMD = make dracut_initrd
endif

PHONY += initrd
initrd:  initrd.img
PHONY += initrd.img
initrd.img:	$(INITRD_DIR)/initrd.img
$(INITRD_DIR)/initrd.img:	$(INITRD_DEPS)
	$(DRACUT_CMD)

PHONY += dracut_initrd
dracut_initrd:
	dracut --force \
		--install "$(INITRD_BINARIES)" \
		--filesystems "vfat msdos fat ext2 ext3 ext4 xfs jfs hfs reiserfs nfs" \
		--include $(INITRD_BUILD_DIR) / \
		--no-hostonly \
		--no-hostonly-cmdline \
		--add network \
		--add syslog \
		--add debug \
		--omit usrmount \
		$(INITRD_DIR)/initrd.img $(KVER)
	
#
#	Prep a docker container with a known distro (CentOS 7 initially)
#	that can be used to build a consistent autoinstall client regardless
#	of the build host.
#
DOCKERFILE_DIR = $(INITRD_SRC_DIR)/systemimager-build-container
DOCKERFILE = $(DOCKERFILE_DIR)/Dockerfile
DOCKER_IMAGE_NAME = systemimager/initrd-builder
PHONY += build_container
build_container: docker_build_container
PHONY += docker_build_container
docker_build_container: $(STAMP_DIR)/docker_build_container.build
$(STAMP_DIR)/docker_build_container.build:  $(INITRD_DIR)/initrd.rul
	mkdir -p $(DOCKERFILE_DIR)
	echo "FROM centos:7" \
		> $(DOCKERFILE)
	echo "MAINTAINER Brian Elliott Finley <brian@thefinleys.com>" \
		>> $(DOCKERFILE)
	echo "" \
		>> $(DOCKERFILE)
	echo "# Things to make life easier if tweaking" \
		>> $(DOCKERFILE)
	echo "RUN yum update -y" \
		>> $(DOCKERFILE)
	echo "RUN yum install -y vim man git" \
		>> $(DOCKERFILE)
	echo "RUN yum install -y mlocate && updatedb" \
		>> $(DOCKERFILE)
	echo "" \
		>> $(DOCKERFILE)
	echo "# Minimal commands needed for actual builds" \
		>> $(DOCKERFILE)
	echo "RUN yum install -y dracut kernel make gcc gcc-c++ wget flex rsync" \
		>> $(DOCKERFILE)
	echo "RUN yum install -y rpm-build gperf pam-devel quilt lzop glib2-devel PyXML glibc-static python-devel" \
		>> $(DOCKERFILE)
	echo "RUN yum install -y e2fsprogs e2fsprogs-devel libuuid-devel ncurses-devel readline-devel" \
		>> $(DOCKERFILE)
	echo "RUN yum install -y parted kbd strace dosfstools kexec-tools btrfs-progs xfsprogs docbook-utils bc" \
		>> $(DOCKERFILE)
	echo "" \
		>> $(DOCKERFILE)
	
	docker build -t $(DOCKER_IMAGE_NAME) $(DOCKERFILE_DIR)
	touch $@

build_container_clean: docker_build_container_clean
PHONY += docker_build_container_clean
docker_build_container_clean:
	rm $(STAMP_DIR)/docker_build_container.build

PHONY += install_initrd_template
install_initrd_template:	$(INITRD_BUILD_DIR).build
	mkdir -p $(BOOT_BIN_DEST)
	rsync -a $(INITRD_BUILD_DIR)/ $(BOOT_BIN_DEST)/initrd_template/

# install the autoinstall ramdisk - the initial ramdisk used by autoinstall
# clients when beginning an autoinstall
PHONY += install_initrd
install_initrd:	$(INITRD_DIR)/initrd.img
	mkdir -p $(BOOT_BIN_DEST)
	$(SI_INSTALL) -m 644 $(INITRD_DIR)/initrd.img \
	    $(BOOT_BIN_DEST)/initrd.img

#
#   2015.01.28  Olivier Lahaye
#       - Do not build kernel. Instead use the build host distro one.
#
LINUX_VERSION = $(shell cat /proc/version |cut -d" " -f3)
LINUX_IMAGE = /boot/vmlinuz-$(LINUX_VERSION)

# install the kernel that autoinstall clients will boot from during
# autoinstallation
PHONY += install_kernel
install_kernel:	$(LINUX_IMAGE)
	mkdir -p $(BOOT_BIN_DEST)
	$(SI_INSTALL) -m 644 $(LINUX_IMAGE) \
	    $(BOOT_BIN_DEST)/kernel
	cat /proc/version |cut -d' ' -f3 > $(BOOT_BIN_DEST)/version.txt

PHONY += build_dir_clean
build_dir_clean:
	rm -rf $(INITRD_BUILD_DIR)
	rm -f  $(INITRD_BUILD_DIR).build
	rm -f  $(INITRD_BUILD_DIR).prep
	rm -f  $(INITRD_BUILD_DIR).skel

PHONY += initrd_clean
initrd_clean:	build_dir_clean cx_freeze_clean bittorrent_clean udpcast_clean hfsutils_clean docker_build_container_clean
	-find . -name "*~" -exec rm -f {} \;
	rm -f $(INITRD_DIR)/initrd.img

PHONY += initrd_distclean
initrd_distclean:	initrd_clean
	-rm -rf $(INITRD_SRC_DIR)
